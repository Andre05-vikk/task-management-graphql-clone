"""
Task Management GraphQL Schema
This schema defines types and operations for a task management system.
"""

scalar DateTime

"""
User type represents a user in the system
"""
type User {
  id: ID!
  username: String!
  email: String!
  firstName: String
  lastName: String
  createdAt: DateTime!
  updatedAt: DateTime!
  tasks: [Task!]
}

"""
Task type represents a task in the system
"""
type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority
  dueDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
  user: User!
}

"""
Authentication result containing JWT token
"""
type AuthPayload {
  token: String!
  user: User!
}

"""
Available task statuses
"""
enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

"""
Task priority levels
"""
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

"""
Input type for creating a new user
"""
input CreateUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
}

"""
Input type for updating a user
"""
input UpdateUserInput {
  username: String
  email: String
  firstName: String
  lastName: String
  password: String
}

"""
Input type for creating a new task
"""
input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus = TO_DO
  priority: TaskPriority
  dueDate: DateTime
}

"""
Input type for updating a task
"""
input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  priority: TaskPriority
  dueDate: DateTime
}

"""
Input for login authentication
"""
input LoginInput {
  email: String!
  password: String!
}

type Query {
  """
  Get all users in the system
  """
  users: [User!]!
  
  """
  Get a specific user by ID
  """
  user(id: ID!): User
  
  """
  Get all tasks in the system
  """
  tasks: [Task!]!
  
  """
  Get a specific task by ID
  """
  task(id: ID!): Task
  
  """
  Get the currently authenticated user
  """
  me: User
}

type Mutation {
  """
  Create a new user account
  """
  createUser(input: CreateUserInput!): User!
  
  """
  Update an existing user's information
  """
  updateUser(id: ID!, input: UpdateUserInput!): User!
  
  """
  Delete a user account
  """
  deleteUser(id: ID!): Boolean!
  
  """
  Create a new task
  """
  createTask(input: CreateTaskInput!): Task!
  
  """
  Update an existing task
  """
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  
  """
  Delete a task
  """
  deleteTask(id: ID!): Boolean!
  
  """
  Log in a user and return an authentication token
  """
  login(input: LoginInput!): AuthPayload!
  
  """
  Log out the current user
  """
  logout: Boolean!
}

"""
Standard error format for GraphQL responses
"""
type Error {
  path: String!
  message: String!
}
